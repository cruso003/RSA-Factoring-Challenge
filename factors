#!/usr/bin/python3

"""Factorize digits into an outcome of two smaller digits"""
import sys
import time
import math

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def pollard_rho(n):
    if n % 2 == 0:
        return 2
    x = 2
    y = 2
    d = 1
    f = lambda x: (x**2 + 1) % n
    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)
    return d

def least_prime(n):
    """Find the smallest prime factor of n"""
    if n == 1:
        return 1
    if n % 2 == 0:
        return 2
    while True:
        factor = pollard_rho(n)
        if factor != n:
            return factor
        n += 2

def factorize(digit):
    """Factorize a digit into two smaller digits"""
    if digit <= 1:
        return digit, 1

    elem = least_prime(digit)
    if elem == digit:
        return digit, 1

    fac = digit // elem
    return fac, elem

def factorize_file(path):
    """Factorize digits in the provided file into two smaller digits"""
    try:
        with open(path) as f:
            for line in f:
                n = int(line.strip())
                p, q = factorize(n)
                print(f"{n}={p}*{q}")

                if time.time() - start_time > 5:
                    print("Execution time exceeded the limit.")
                    break
    except FileNotFoundError:
        print(f"File '{path}' not found.")
    except ValueError:
        print("Invalid data in the file.")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        sys.exit(f"Usage: {sys.argv[0]} <path>")

    factors = sys.argv[1]

    start_time = time.time()

    factorize_file(factors)
